name: Auto Merge Release to Main

on:
  push:
    branches:
      - release_*

jobs:
  create-and-merge-branch:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract branch names
        id: extract-names
        run: |
          echo "::set-output name=release_branch::$(echo '${{ github.ref }}' | sed 's/refs\/heads\///')"
          echo "::set-output name=hr_branch::$(echo '${{ github.event.pull_request.head.ref }}')"

      - name: Create new branch
        id: create-branch
        run: |
          new_branch="${{ steps.extract-names.outputs.release_branch }}_to_develop"
          git fetch origin ${{ steps.extract-names.outputs.release_branch }}
          git checkout -B $new_branch origin/${{ steps.extract-names.outputs.release_branch }}
          git push --force origin $new_branch

      - name: Check for changes from new branch to main
        id: check-diff
        run: |
          git fetch origin main
          if git diff --quiet origin/main..${{ steps.create-branch.outputs.new_branch }}; then
            echo "::set-output name=has_changes::false"
          else
            echo "::set-output name=has_changes::true"
          fi

      - name: Create Pull Request
        if: steps.check-diff.outputs.has_changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.create-branch.outputs.new_branch }}
          base: main
          title: 'Merge ${{ steps.create-branch.outputs.new_branch }} to main'
          body: 'This is an automated pull request created by GitHub Actions.'
          assignees: copy202

      - name: Check for merge conflicts
        if: steps.check-diff.outputs.has_changes == 'true'
        run: |
          pr_number=$(jq --raw-output '.number' < $GITHUB_WORKSPACE/pull-request.json)
          conflict_status=$(gh pr view $pr_number --json mergeStateStatus --jq '.mergeStateStatus')
          echo "::set-output name=conflict_status::$conflict_status"


